package library;

import java.util.Scanner;

public class UserMenu {
    UserManager userManager;
    BookManager bookManager;
    Scanner sc = new Scanner(System.in);

    UserMenu() {
        this.userManager = new UserManager();
        this.bookManager = new BookManager();
        for(Book book : bookManager.getBookList()){
            if(book.getBorrowedId() != null){
                userManager.getUserMap().get(book.getBorrowedId()).getBorrowedBookList().add(book);
            }
        }
    }

    void showUI() {
        boolean isRunning = true;
        try {
            while (isRunning) {
                if (userManager.userState) {
                    if (userManager.currentLoginUser.getId().equals("admin")) {
                        menuAdmin();
                    } else {
                        menuShowLogin();
                    }
                } else {
                    isRunning = menuShow();
                }
            }
        }finally {
            bookManager.save();
            userManager.save();
        }
    }

    /**
     * 가장 먼저 실행 될 메소드
     *
     * @return
     */

    boolean menuShow() {

        System.out.println("=============================");
        System.out.println("도서관리 프로그램에 오신것을 환영합니다.");

        System.out.println("원하시는 메뉴를 선택하세요");
        System.out.println("1 : 로그인   /   2 : 회원가입   /   3 : 종료");

        int num = 0;
        num = Integer.parseInt(sc.nextLine());
        switch (num) {
            case 1:
                menuLogin();
                return true;
            case 2:
                menuRegister();
                return true;
            case 3:
                System.out.println("프로그램을 종료합니다.");
                return false;
            default:
                System.out.println("올바르지 않은 명령입니다. 다시 입력해주세요.");
                return true;
        }
    }

    void menuShowLogin() {

        System.out.println("=============================");
        System.out.println("원하시는 메뉴를 선택하여 주세요");
        System.out.println("1 : 도서검색   /   2 : 도서대출   /   3 : 도서반납");
        System.out.println("4 : 도서목록   /   5 : 로그아웃   /   6 : 회원정보");
        System.out.println("7 : 회원탈퇴");

        int num = Integer.parseInt(sc.nextLine());

        switch (num) {
            case 1:
                findBook();
                break;
            case 2:
                borrowBook();
                break;
            case 3:
                returnBook();
                break;
            case 4:
                listBook();
                break;
            case 5:
                menuLogout();
                break;
            case 6:
                printUserInfo();
                break;
            case 7:
                menuWithDraw();
                break;
            default:
                System.out.println("올바르지 않은 명령입니다. 다시 입력해주세요.");
                break;
        }
    }

    void menuAdmin() {
        System.out.println("=============================");
        System.out.println("도서관리 관리자 메뉴입니다.");

        System.out.println("원하시는 메뉴를 선택하세요");
        System.out.println("1 : 도서등록/t 2 : 도서삭제    /    3 : 회원관리");
        System.out.println("4 : 베스트셀러/t 5 : 로그아웃");

        int num = Integer.parseInt(sc.nextLine());
        switch (num) {
            case 1:
                addBook();
                break;
            case 2:
                deleteBook();
                break;
            case 3:
                deleteUser();
                break;
            case 4:
                printBestSeller();
                break;
            case 5:
                menuLogout();
                break;
            default:
                System.out.println("올바르지 않은 명령입니다. 다시 입력해주세요.");
                break;
        }
    }

    void addBook(){
        System.out.println("도서 등록 메뉴입니다.");
        System.out.print("도서 제목을 입력해주세요: ");
        String title = sc.nextLine();
        if(bookManager.findBook(title) != null){
            System.out.println("이미 있는 도서 제목입니다.");
            return;
        }
        System.out.print("도서 장르를 입력해주세요: ");
        String genre = sc.nextLine();
        Book newBook = new Book(title, genre);
        bookManager.addBook(newBook);
        System.out.println("도서 추가되었습니다.");
    }

    void deleteBook(){
        System.out.println("도서 삭제 메뉴입니다.");
        System.out.print("삭제할 도서 제목을 입력해주세요.");
        String title = sc.nextLine();
        Book book = bookManager.findBook(title);
        if(book == null){
            System.out.println("찾으시는 도서이 없습니다.");
            return;
        }
        bookManager.deleteBook(book);
        System.out.println("도서 삭제되었습니다.");
    }

    void deleteUser(){
        System.out.println("회원 삭제 메뉴입니다.");
        System.out.print("삭제할 회원 ID를 입력해주세요.");
        String id = sc.nextLine();
        UserInfo userInfo = userManager.getUserMap().get(id);
        if(userInfo == null){
            System.out.println("찾으시는 회원이 없습니다.");
            return;
        }
        userManager.getUserMap().remove(id);
        System.out.println("회원 삭제되었습니다.");
    }

    void printBestSeller(){
        System.out.println("베스트 셀러 메뉴입니다.");
        Book bestSeller = null;
        for(Book book : bookManager.getBookList()){
            if(bestSeller == null || book.getBorrowCount() > bestSeller.getBorrowCount()){
                bestSeller = book;
            }
        }
        if(bestSeller == null){
            System.out.println("도서이 없습니다.");
            return;
        }
        System.out.println("베스트 셀러 정보입니다." );
        System.out.println("제목: " + bestSeller.getTitle());
        System.out.println("장르: " + bestSeller.getGenre());
        System.out.println("대여 여부: " + bestSeller.isBorrowed());
        if(bestSeller.isBorrowed()){
            System.out.println("대여자 ID: " + bestSeller.getBorrowedId());
            System.out.println("대여일: " + bestSeller.getBorrowedDate());
            int lateDays = DateUtils.diffDatesFromToday(bestSeller.getBorrowedDate());
            int lateFee = 0;
            if(lateDays >= 7){
                lateFee = 1000;
            }
            System.out.println("연체료: " + lateFee);
        }
    }

    void findBook(){
        System.out.println("도서 검색 메뉴입니다.");
        System.out.print("찾으시는 도서 제목을 입력해주세요: ");
        String title = sc.nextLine();
        Book book = bookManager.findBook(title);
        if(book == null){
            System.out.println("찾으시는 도서이 없습니다.");
            return;
        }
        System.out.println("찾은 도서 정보입니다.");
        System.out.println("제목: " + book.getTitle());
        System.out.println("장르: " + book.getGenre());
        System.out.println("대여 여부: " + book.isBorrowed());
        if(book.isBorrowed()){
//            System.out.println("대여자 ID: " + book.getBorrowedId());
            System.out.println("대여일: " + book.getBorrowedDate());
//            int lateDays = DateUtils.diffDatesFromToday(book.getBorrowedDate());
//            int lateFee = 0;
//            if(lateDays >= 7){
//                lateFee = 1000;
//            }
//            System.out.println("연체료: " + lateFee);
        }
    }

    void borrowBook(){
        System.out.println("도서 대여 메뉴입니다.");
        System.out.print("대여할 도서 제목을 입력해주세요: ");
        String title = sc.nextLine();
        boolean result = bookManager.borrowBook(userManager.currentLoginUser, title);
        if(result){
            System.out.println("도서 대여되었습니다.");
        } else{
            System.out.println("도서 대여에 실패했습니다.");
        }
    }

    void returnBook(){
        System.out.println("도서 반납 메뉴입니다.");
        System.out.print("반납할 도서 제목을 입력해주세요: ");
        String title = sc.nextLine();
        boolean result = bookManager.returnBook(userManager.currentLoginUser, title);
        if(result){
            System.out.println("도서 반납되었습니다.");
        } else{
            System.out.println("도서 반납에 실패했습니다.");
        }
    }

    void listBook(){
        System.out.println("도서 목록 메뉴입니다.");
        bookManager.printBookList();
    }

    String insertId(String msg) {
        while(true) {
            System.out.print(msg);
            String id = sc.nextLine();
            if(id.length() == 0 || !isAlphabet(id.charAt(0))){
                System.out.println("ID는 첫 글자 영문자로 입력해주세요.");
                continue;
            }
            return id;
        }
    }

    boolean isAlphabet(char c){
        return (c >= 'a' && c <= 'z') || (c >='A' && c <='Z');
    }

    String insertPw(String msg) {
        while(true) {
            System.out.print(msg);
            String pw = sc.nextLine();
            if(pw.length() > 10){
                System.out.println("PW는 10자리를 넘어갈 수 없습니다.");
                continue;
            }
            return pw;
        }
    }

    void menuLogin() {
        int loginCount = 0;
        System.out.println("로그인 입니다.");
        while(true) {
            String id = insertId("ID를 입력해주세요 : ");
            String pw = insertPw("패스워드를 입력해주세요 : ");
            boolean result = userManager.login(id, pw);
            if (!result) {
                loginCount++;
                System.out.println("ID 또는 패스워드가 틀렸습니다. 현재 로그인 시도: " + loginCount + "/3");
                if(loginCount >= 3){
                    System.out.println("잘못된 로그인 시도가 3회이상이므로 종료합니다.");
                    System.exit(1);
                }
            } else {
                break;
            }
        }
    }

    boolean checkAutoRegister(){
        String captcha = "";
        for (int i = 1; i <= 6; i++) {
            captcha += (char) ((Math.random() * 26) + 65);
        }
        System.out.println("자동 가입 방지 문자: " + captcha);
        System.out.print("위 문자를 입력해주세요 : ");
        String userInput = sc.nextLine();
        if(captcha.equals(userInput)){
            System.out.println("정상입니다.");
            return true;
        } else {
            System.out.println("잘못 입력하셨습니다.");
            return false;
        }
    }

    void menuRegister() {
        System.out.println("회원가입 입니다.");
        while(true) {
            String id = insertId("ID를 입력해주세요 : ");
            String pw = insertPw("패스워드를 입력해주세요 : ");
            if(!checkAutoRegister()){
                continue;
            }
            boolean result = userManager.register(id, pw);
            if(result){
               break;
            }
        }
    }

    void menuLogout() {
        userManager.userCheck();
        System.out.println("로그아웃 하셨습니다.");
    }

    void menuWithDraw() {
        System.out.println("회원 탈퇴 메뉴입니다.");
        System.out.print("비밀번호를 다시 입력해주세요: ");
        String pw = sc.nextLine();
        if(!userManager.currentLoginUser.getPw().equals(pw)){
            System.out.println("비밀번호가 다릅니다.");
            return;
        }
        userManager.userWithdrawal();
    }

    void printUserInfo(){
        userManager.printUserInfo();
    }
}
